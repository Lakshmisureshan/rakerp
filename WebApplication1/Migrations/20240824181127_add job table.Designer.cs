// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication1.Data;

#nullable disable

namespace WebApplication1.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20240824181127_add job table")]
    partial class addjobtable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.24")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e76b0657-67f3-4e84-9320-1ed68a80a8f5",
                            ConcurrencyStamp = "e76b0657-67f3-4e84-9320-1ed68a80a8f5",
                            Name = "Reader",
                            NormalizedName = "READER"
                        },
                        new
                        {
                            Id = "9ab357a2-67a2-4be8-82fd-12339553dd8b",
                            ConcurrencyStamp = "9ab357a2-67a2-4be8-82fd-12339553dd8b",
                            Name = "Writer",
                            NormalizedName = "WRITER"
                        },
                        new
                        {
                            Id = "72c35b91-4022-4c2b-adc3-1ec004c08a21",
                            ConcurrencyStamp = "72c35b91-4022-4c2b-adc3-1ec004c08a21",
                            Name = "FinanceManager",
                            NormalizedName = "FINANCEMANAGER"
                        },
                        new
                        {
                            Id = "3c8cdf22-752c-446a-bb42-9bea05872bd5",
                            ConcurrencyStamp = "3c8cdf22-752c-446a-bb42-9bea05872bd5",
                            Name = "TradeManager",
                            NormalizedName = "TRADEMANAGER"
                        },
                        new
                        {
                            Id = "b52de381-7ff6-4d7f-a385-51fa28f43aaa",
                            ConcurrencyStamp = "b52de381-7ff6-4d7f-a385-51fa28f43aaa",
                            Name = "TradeUser",
                            NormalizedName = "TRADEUSER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "356ff228-0e5f-436a-9ac5-2d760b997dd5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ac241ec0-c0e5-4174-932f-4baf8024afa0",
                            Email = "admin@trading.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@TRADING.COM",
                            NormalizedUserName = "ADMIN@TRADING.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBJHouThnCFoWkp/nITCFNWO2GzAD6XcxOL68L1bz1QCkhCbu5GEqo0you0Mhm4SXg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c76243c0-dfb6-4fa1-8ced-4ed912d0903c",
                            TwoFactorEnabled = false,
                            UserName = "admin@trading.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "356ff228-0e5f-436a-9ac5-2d760b997dd5",
                            RoleId = "e76b0657-67f3-4e84-9320-1ed68a80a8f5"
                        },
                        new
                        {
                            UserId = "356ff228-0e5f-436a-9ac5-2d760b997dd5",
                            RoleId = "9ab357a2-67a2-4be8-82fd-12339553dd8b"
                        },
                        new
                        {
                            UserId = "356ff228-0e5f-436a-9ac5-2d760b997dd5",
                            RoleId = "72c35b91-4022-4c2b-adc3-1ec004c08a21"
                        },
                        new
                        {
                            UserId = "356ff228-0e5f-436a-9ac5-2d760b997dd5",
                            RoleId = "3c8cdf22-752c-446a-bb42-9bea05872bd5"
                        },
                        new
                        {
                            UserId = "356ff228-0e5f-436a-9ac5-2d760b997dd5",
                            RoleId = "b52de381-7ff6-4d7f-a385-51fa28f43aaa"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.Country", b =>
                {
                    b.Property<int>("countryid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("countryid"), 1L, 1);

                    b.Property<string>("countryname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("countryid");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.Currency", b =>
                {
                    b.Property<int>("currencyid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("currencyid"), 1L, 1);

                    b.Property<string>("currencyname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("exchangerate")
                        .HasColumnType("float");

                    b.HasKey("currencyid");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.Customer", b =>
                {
                    b.Property<int>("customerid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("customerid"), 1L, 1);

                    b.Property<string>("Customername")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IEC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Trnno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ccode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("countryid")
                        .HasColumnType("int");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pobox")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("shortname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("web")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("customerid");

                    b.HasIndex("countryid");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.IsLDApplicable", b =>
                {
                    b.Property<int>("ldid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ldid"), 1L, 1);

                    b.Property<string>("IsLDApplicableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ldid");

                    b.ToTable("IsLDApplicable");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.Job", b =>
                {
                    b.Property<int>("Jobid")
                        .HasColumnType("int");

                    b.Property<int>("currencyid")
                        .HasColumnType("int");

                    b.Property<int>("customerid")
                        .HasColumnType("int");

                    b.Property<string>("deliveryterms")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("exchangerate")
                        .HasColumnType("float");

                    b.Property<int>("isldapplicable")
                        .HasColumnType("int");

                    b.Property<DateTime>("jobdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("jobtypeid")
                        .HasColumnType("int");

                    b.Property<string>("ldpercent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("lpodate")
                        .HasColumnType("datetime2");

                    b.Property<string>("lpono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("manufacturingbayid")
                        .HasColumnType("int");

                    b.Property<double>("ordervalue")
                        .HasColumnType("float");

                    b.Property<double>("ordervaluebasecurrency")
                        .HasColumnType("float");

                    b.Property<string>("paymentterms")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("podeliverydate")
                        .HasColumnType("datetime2");

                    b.Property<int>("projectcategoryid")
                        .HasColumnType("int");

                    b.Property<string>("projectengineerid")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("projectmanagerid")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("projectname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("qualitylevelid")
                        .HasColumnType("int");

                    b.Property<int>("totalnumber")
                        .HasColumnType("int");

                    b.Property<string>("warrantyterms")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Jobid");

                    b.HasIndex("currencyid");

                    b.HasIndex("customerid");

                    b.HasIndex("isldapplicable");

                    b.HasIndex("jobtypeid");

                    b.HasIndex("manufacturingbayid");

                    b.HasIndex("projectcategoryid");

                    b.HasIndex("projectengineerid");

                    b.HasIndex("projectmanagerid");

                    b.HasIndex("qualitylevelid");

                    b.ToTable("Job");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.JobType", b =>
                {
                    b.Property<int>("jobtypeid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("jobtypeid"), 1L, 1);

                    b.Property<string>("JobtypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("jobtypeid");

                    b.ToTable("JobType");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.ManufacturingBay", b =>
                {
                    b.Property<int>("BayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BayId"), 1L, 1);

                    b.Property<string>("BayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BayId");

                    b.ToTable("ManufacturingBay");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.ProjectCategory", b =>
                {
                    b.Property<int>("projectcategoryid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("projectcategoryid"), 1L, 1);

                    b.Property<string>("projectcategoryname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("projectcategoryid");

                    b.ToTable("ProjectCategory");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.QualityLevel", b =>
                {
                    b.Property<int>("qualitylevelid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("qualitylevelid"), 1L, 1);

                    b.Property<string>("qualitylevelname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("qualitylevelid");

                    b.ToTable("QualityLevel");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.Customer", b =>
                {
                    b.HasOne("WebApplication1.Models.Domain.Country", "country")
                        .WithMany()
                        .HasForeignKey("countryid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("country");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.Job", b =>
                {
                    b.HasOne("WebApplication1.Models.Domain.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("currencyid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("customerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.IsLDApplicable", "IsLDApplicable")
                        .WithMany()
                        .HasForeignKey("isldapplicable")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.JobType", "JobType")
                        .WithMany()
                        .HasForeignKey("jobtypeid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.ManufacturingBay", "ManufacturingBay")
                        .WithMany()
                        .HasForeignKey("manufacturingbayid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.ProjectCategory", "ProjectCategory")
                        .WithMany()
                        .HasForeignKey("projectcategoryid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "ProjectEngineer")
                        .WithMany()
                        .HasForeignKey("projectengineerid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "ProjectManager")
                        .WithMany()
                        .HasForeignKey("projectmanagerid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.QualityLevel", "QualityLevel")
                        .WithMany()
                        .HasForeignKey("qualitylevelid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Customer");

                    b.Navigation("IsLDApplicable");

                    b.Navigation("JobType");

                    b.Navigation("ManufacturingBay");

                    b.Navigation("ProjectCategory");

                    b.Navigation("ProjectEngineer");

                    b.Navigation("ProjectManager");

                    b.Navigation("QualityLevel");
                });
#pragma warning restore 612, 618
        }
    }
}
