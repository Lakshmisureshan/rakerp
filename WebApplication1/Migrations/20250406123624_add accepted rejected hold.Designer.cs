// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication1.Data;

#nullable disable

namespace WebApplication1.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20250406123624_add accepted rejected hold")]
    partial class addacceptedrejectedhold
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.24")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e76b0657-67f3-4e84-9320-1ed68a80a8f5",
                            ConcurrencyStamp = "e76b0657-67f3-4e84-9320-1ed68a80a8f5",
                            Name = "Reader",
                            NormalizedName = "READER"
                        },
                        new
                        {
                            Id = "9ab357a2-67a2-4be8-82fd-12339553dd8b",
                            ConcurrencyStamp = "9ab357a2-67a2-4be8-82fd-12339553dd8b",
                            Name = "Writer",
                            NormalizedName = "WRITER"
                        },
                        new
                        {
                            Id = "72c35b91-4022-4c2b-adc3-1ec004c08a21",
                            ConcurrencyStamp = "72c35b91-4022-4c2b-adc3-1ec004c08a21",
                            Name = "FinanceManager",
                            NormalizedName = "FINANCEMANAGER"
                        },
                        new
                        {
                            Id = "3c8cdf22-752c-446a-bb42-9bea05872bd5",
                            ConcurrencyStamp = "3c8cdf22-752c-446a-bb42-9bea05872bd5",
                            Name = "TradeManager",
                            NormalizedName = "TRADEMANAGER"
                        },
                        new
                        {
                            Id = "b52de381-7ff6-4d7f-a385-51fa28f43aaa",
                            ConcurrencyStamp = "b52de381-7ff6-4d7f-a385-51fa28f43aaa",
                            Name = "TradeUser",
                            NormalizedName = "TRADEUSER"
                        },
                        new
                        {
                            Id = "5e648847-b462-464d-8e1e-aa20a7947bef",
                            ConcurrencyStamp = "5e648847-b462-464d-8e1e-aa20a7947bef",
                            Name = "POVerification",
                            NormalizedName = "POVERIFICATION"
                        },
                        new
                        {
                            Id = "333559dc-c729-403c-a80e-77250b8a0592",
                            ConcurrencyStamp = "333559dc-c729-403c-a80e-77250b8a0592",
                            Name = "POAuthorization",
                            NormalizedName = "POAUTHORIZATION"
                        },
                        new
                        {
                            Id = "e05d3da2-24c8-43fb-859f-cdbee6ac2a73",
                            ConcurrencyStamp = "e05d3da2-24c8-43fb-859f-cdbee6ac2a73",
                            Name = "GRNRegistration",
                            NormalizedName = "GRNREGISTRATION"
                        },
                        new
                        {
                            Id = "0eae39be-0cd2-4e99-a8c6-8258c72dc7ad",
                            ConcurrencyStamp = "0eae39be-0cd2-4e99-a8c6-8258c72dc7ad",
                            Name = "PRVerification",
                            NormalizedName = "PRVERIFICATION"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "356ff228-0e5f-436a-9ac5-2d760b997dd5",
                            RoleId = "e76b0657-67f3-4e84-9320-1ed68a80a8f5"
                        },
                        new
                        {
                            UserId = "356ff228-0e5f-436a-9ac5-2d760b997dd5",
                            RoleId = "9ab357a2-67a2-4be8-82fd-12339553dd8b"
                        },
                        new
                        {
                            UserId = "356ff228-0e5f-436a-9ac5-2d760b997dd5",
                            RoleId = "72c35b91-4022-4c2b-adc3-1ec004c08a21"
                        },
                        new
                        {
                            UserId = "356ff228-0e5f-436a-9ac5-2d760b997dd5",
                            RoleId = "3c8cdf22-752c-446a-bb42-9bea05872bd5"
                        },
                        new
                        {
                            UserId = "356ff228-0e5f-436a-9ac5-2d760b997dd5",
                            RoleId = "b52de381-7ff6-4d7f-a385-51fa28f43aaa"
                        },
                        new
                        {
                            UserId = "356ff228-0e5f-436a-9ac5-2d760b997dd5",
                            RoleId = "5e648847-b462-464d-8e1e-aa20a7947bef"
                        },
                        new
                        {
                            UserId = "356ff228-0e5f-436a-9ac5-2d760b997dd5",
                            RoleId = "333559dc-c729-403c-a80e-77250b8a0592"
                        },
                        new
                        {
                            UserId = "356ff228-0e5f-436a-9ac5-2d760b997dd5",
                            RoleId = "e05d3da2-24c8-43fb-859f-cdbee6ac2a73"
                        },
                        new
                        {
                            UserId = "356ff228-0e5f-436a-9ac5-2d760b997dd5",
                            RoleId = "0eae39be-0cd2-4e99-a8c6-8258c72dc7ad"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("passcode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "356ff228-0e5f-436a-9ac5-2d760b997dd5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "16c87ea8-64c5-4dbe-aefa-e7146bff7fe2",
                            Email = "admin@trading.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@TRADING.COM",
                            NormalizedUserName = "ADMIN@TRADING.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDsXH53wbuXDJN+PC/z6eqn3YC6GqE1XeVNlj/rKUufugzWQARgfoL/bw/obmykYpg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e49ceb4a-e691-4c37-abc4-ddfb81562009",
                            TwoFactorEnabled = false,
                            UserName = "admin@trading.com",
                            passcode = "123456"
                        });
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.BaseCurrency", b =>
                {
                    b.Property<int>("basecurrencyid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("basecurrencyid"), 1L, 1);

                    b.Property<string>("basecurrency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("basecurrencyid");

                    b.ToTable("BaseCurrency");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.Bom", b =>
                {
                    b.Property<int>("bomid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("bomid"), 1L, 1);

                    b.Property<DateTime?>("BomcreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RequiredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("bomcreatedbyid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("bomnumber")
                        .HasColumnType("int");

                    b.Property<double>("bomqty")
                        .HasColumnType("float");

                    b.Property<int>("bomrevno")
                        .HasColumnType("int");

                    b.Property<int>("bomstatus")
                        .HasColumnType("int");

                    b.Property<int>("bomuomid")
                        .HasColumnType("int");

                    b.Property<int>("currencyid")
                        .HasColumnType("int");

                    b.Property<int>("itemid")
                        .HasColumnType("int");

                    b.Property<int>("jobid")
                        .HasColumnType("int");

                    b.Property<double>("prcreatedqty")
                        .HasColumnType("float");

                    b.Property<double>("price")
                        .HasColumnType("float");

                    b.Property<int>("prodstageid")
                        .HasColumnType("int");

                    b.HasKey("bomid");

                    b.HasIndex("bomcreatedbyid");

                    b.HasIndex("bomuomid");

                    b.HasIndex("currencyid");

                    b.HasIndex("itemid");

                    b.HasIndex("jobid");

                    b.HasIndex("prodstageid");

                    b.ToTable("Bom");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.BudgettHeader", b =>
                {
                    b.Property<int>("budgetheaderid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("budgetheaderid"), 1L, 1);

                    b.Property<string>("budgetheadername")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("budgetheaderid");

                    b.ToTable("BudgettHeader");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.Category", b =>
                {
                    b.Property<int>("categoryid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("categoryid"), 1L, 1);

                    b.Property<int>("budgetheaderid")
                        .HasColumnType("int");

                    b.Property<string>("categoryname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("categoryid");

                    b.HasIndex("budgetheaderid");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.Country", b =>
                {
                    b.Property<int>("countryid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("countryid"), 1L, 1);

                    b.Property<string>("countryname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("countryid");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.Currency", b =>
                {
                    b.Property<int>("currencyid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("currencyid"), 1L, 1);

                    b.Property<string>("currencyname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("exchangerate")
                        .HasColumnType("float");

                    b.HasKey("currencyid");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.Customer", b =>
                {
                    b.Property<int>("customerid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("customerid"), 1L, 1);

                    b.Property<string>("Customername")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IEC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Trnno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ccode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("countryid")
                        .HasColumnType("int");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pobox")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("shortname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("web")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("customerid");

                    b.HasIndex("countryid");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.estimation", b =>
                {
                    b.Property<int>("estimationid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("estimationid"), 1L, 1);

                    b.Property<int>("applicationid")
                        .HasColumnType("int");

                    b.Property<int>("currencyid")
                        .HasColumnType("int");

                    b.Property<int>("isconvertedtobom")
                        .HasColumnType("int");

                    b.Property<int>("itemid")
                        .HasColumnType("int");

                    b.Property<int>("jobid")
                        .HasColumnType("int");

                    b.Property<decimal>("price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("uomid")
                        .HasColumnType("int");

                    b.HasKey("estimationid");

                    b.HasIndex("applicationid");

                    b.HasIndex("currencyid");

                    b.HasIndex("itemid");

                    b.HasIndex("jobid");

                    b.HasIndex("uomid");

                    b.ToTable("estimation");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.FixedBudget", b =>
                {
                    b.Property<int>("fixedbudgetid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("fixedbudgetid"), 1L, 1);

                    b.Property<int>("budgetId")
                        .HasColumnType("int");

                    b.Property<decimal>("fixedamount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("revision")
                        .HasColumnType("int");

                    b.HasKey("fixedbudgetid");

                    b.HasIndex("budgetId");

                    b.ToTable("FixedBudget");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.GRNDetails", b =>
                {
                    b.Property<int>("grntblid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("grntblid"), 1L, 1);

                    b.Property<int>("grnno")
                        .HasColumnType("int");

                    b.Property<decimal>("grnqty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("inventoryuomid")
                        .HasColumnType("int");

                    b.Property<int>("itemcode")
                        .HasColumnType("int");

                    b.Property<double>("multiplyingfactor")
                        .HasColumnType("float");

                    b.Property<decimal>("pounitprice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("pouomid")
                        .HasColumnType("int");

                    b.HasKey("grntblid");

                    b.HasIndex("grnno");

                    b.HasIndex("inventoryuomid");

                    b.HasIndex("itemcode");

                    b.HasIndex("pouomid");

                    b.ToTable("GRNDetails");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.GRNHeader", b =>
                {
                    b.Property<int>("grnno")
                        .HasColumnType("int");

                    b.Property<int>("currencyid")
                        .HasColumnType("int");

                    b.Property<DateTime>("grndate")
                        .HasColumnType("datetime2");

                    b.Property<int>("isregistered")
                        .HasColumnType("int");

                    b.Property<int>("pono")
                        .HasColumnType("int");

                    b.HasKey("grnno");

                    b.HasIndex("currencyid");

                    b.HasIndex("pono");

                    b.ToTable("GRNHeader");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.grntracking", b =>
                {
                    b.Property<int>("grntrackid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("grntrackid"), 1L, 1);

                    b.Property<int>("grncurrencyid")
                        .HasColumnType("int");

                    b.Property<DateTime>("grndate")
                        .HasColumnType("datetime2");

                    b.Property<int>("grnno")
                        .HasColumnType("int");

                    b.Property<decimal>("grnqty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("grnunitprice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("grnuomid")
                        .HasColumnType("int");

                    b.Property<int>("invid")
                        .HasColumnType("int");

                    b.Property<int>("jobid")
                        .HasColumnType("int");

                    b.Property<int>("productid")
                        .HasColumnType("int");

                    b.HasKey("grntrackid");

                    b.HasIndex("grncurrencyid");

                    b.HasIndex("grnno");

                    b.HasIndex("grnuomid");

                    b.HasIndex("jobid");

                    b.HasIndex("productid");

                    b.ToTable("grntracking");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.Inventory", b =>
                {
                    b.Property<int>("invid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("invid"), 1L, 1);

                    b.Property<DateTime>("Entrydate")
                        .HasColumnType("datetime2");

                    b.Property<int>("batchid")
                        .HasColumnType("int");

                    b.Property<int>("invcurrencyid")
                        .HasColumnType("int");

                    b.Property<decimal>("invprice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("jobid")
                        .HasColumnType("int");

                    b.Property<int>("pono")
                        .HasColumnType("int");

                    b.Property<int>("productid")
                        .HasColumnType("int");

                    b.Property<decimal>("quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("reservedqty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("uomid")
                        .HasColumnType("int");

                    b.HasKey("invid");

                    b.HasIndex("invcurrencyid");

                    b.HasIndex("jobid");

                    b.HasIndex("pono");

                    b.HasIndex("productid");

                    b.HasIndex("uomid");

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.Inventoryreservation", b =>
                {
                    b.Property<int>("RId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RId"), 1L, 1);

                    b.Property<int>("fromjobid")
                        .HasColumnType("int");

                    b.Property<int>("inventoryid")
                        .HasColumnType("int");

                    b.Property<int>("invrcurrencyid")
                        .HasColumnType("int");

                    b.Property<decimal>("invunitprice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("issuecreatedqty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("productid")
                        .HasColumnType("int");

                    b.Property<int>("prtblid")
                        .HasColumnType("int");

                    b.Property<DateTime>("reservationtime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("reservedqty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("tojobid")
                        .HasColumnType("int");

                    b.Property<int>("uomid")
                        .HasColumnType("int");

                    b.HasKey("RId");

                    b.HasIndex("fromjobid");

                    b.HasIndex("inventoryid");

                    b.HasIndex("invrcurrencyid");

                    b.HasIndex("productid");

                    b.HasIndex("prtblid");

                    b.HasIndex("tojobid");

                    b.HasIndex("uomid");

                    b.ToTable("Inventoryreservation");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.Invoicedetails", b =>
                {
                    b.Property<int>("invidno")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("invidno"), 1L, 1);

                    b.Property<string>("amount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("counter")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("invoiceno")
                        .HasColumnType("int");

                    b.Property<string>("qty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("taxamount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("unitprice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("uom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("vatpercent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("invidno");

                    b.HasIndex("invoiceno");

                    b.ToTable("Invoicedetails");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.InvoiceReg", b =>
                {
                    b.Property<int>("invoiceregid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("invoiceregid"), 1L, 1);

                    b.Property<decimal>("Invoicereceipts")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Invoiceregisteredby")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Invoicevalue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Invoicevalueinbasecurrency")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("currencyid")
                        .HasColumnType("int");

                    b.Property<int>("customerid")
                        .HasColumnType("int");

                    b.Property<int>("invoiceno")
                        .HasColumnType("int");

                    b.Property<int>("jobid")
                        .HasColumnType("int");

                    b.HasKey("invoiceregid");

                    b.HasIndex("Invoiceregisteredby");

                    b.HasIndex("currencyid");

                    b.HasIndex("customerid");

                    b.HasIndex("invoiceno");

                    b.HasIndex("jobid");

                    b.ToTable("InvoiceReg");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.IsLDApplicable", b =>
                {
                    b.Property<int>("ldid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ldid"), 1L, 1);

                    b.Property<string>("IsLDApplicableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ldid");

                    b.ToTable("IsLDApplicable");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.IssuedetailsfromStock", b =>
                {
                    b.Property<int>("issuedetailid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("issuedetailid"), 1L, 1);

                    b.Property<int>("issuecurrencyid")
                        .HasColumnType("int");

                    b.Property<int>("issuenoteref")
                        .HasColumnType("int");

                    b.Property<decimal>("issueprice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("issueqty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("issueuomid")
                        .HasColumnType("int");

                    b.Property<int>("itemid")
                        .HasColumnType("int");

                    b.Property<decimal>("returnedqty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("rid")
                        .HasColumnType("int");

                    b.HasKey("issuedetailid");

                    b.HasIndex("issuecurrencyid");

                    b.HasIndex("issuenoteref");

                    b.HasIndex("issueuomid");

                    b.HasIndex("itemid");

                    b.HasIndex("rid");

                    b.ToTable("IssuedetailsfromStock");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.Issuenotedetails", b =>
                {
                    b.Property<int>("issuedetailid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("issuedetailid"), 1L, 1);

                    b.Property<int>("issuenoteref")
                        .HasColumnType("int");

                    b.Property<decimal>("issueqty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("itemid")
                        .HasColumnType("int");

                    b.HasKey("issuedetailid");

                    b.HasIndex("issuenoteref");

                    b.HasIndex("itemid");

                    b.ToTable("Issuenotedetails");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.IssueNoteheader", b =>
                {
                    b.Property<int>("issueref")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("isregistered")
                        .HasColumnType("int");

                    b.Property<DateTime>("issuedate")
                        .HasColumnType("datetime2");

                    b.Property<string>("issuedto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("issuetype")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("jobid")
                        .HasColumnType("int");

                    b.HasKey("issueref");

                    b.HasIndex("jobid");

                    b.ToTable("IssueNoteheader");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.Issuereturn", b =>
                {
                    b.Property<int>("issuereturnref")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("isregistered")
                        .HasColumnType("int");

                    b.Property<int>("jobid")
                        .HasColumnType("int");

                    b.Property<DateTime>("returndate")
                        .HasColumnType("datetime2");

                    b.HasKey("issuereturnref");

                    b.HasIndex("jobid");

                    b.ToTable("Issuereturn");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.Issuereturndetails", b =>
                {
                    b.Property<int>("irtblid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("irtblid"), 1L, 1);

                    b.Property<int>("ircurrencyid")
                        .HasColumnType("int");

                    b.Property<decimal>("irunitprice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("iruomid")
                        .HasColumnType("int");

                    b.Property<int>("issuedetailtblid")
                        .HasColumnType("int");

                    b.Property<int>("issuereturnref")
                        .HasColumnType("int");

                    b.Property<int>("productid")
                        .HasColumnType("int");

                    b.Property<decimal>("quantityreturned")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("irtblid");

                    b.HasIndex("ircurrencyid");

                    b.HasIndex("iruomid");

                    b.HasIndex("issuedetailtblid");

                    b.HasIndex("issuereturnref");

                    b.HasIndex("productid");

                    b.ToTable("Issuereturndetails");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.issuereturntracking", b =>
                {
                    b.Property<int>("issuereturntrackid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("issuereturntrackid"), 1L, 1);

                    b.Property<int>("invid")
                        .HasColumnType("int");

                    b.Property<int>("issuecurrencyid")
                        .HasColumnType("int");

                    b.Property<DateTime>("issuereturndate")
                        .HasColumnType("datetime2");

                    b.Property<int>("issuereturnno")
                        .HasColumnType("int");

                    b.Property<decimal>("issuereturnqty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("issuereturnunitprice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("jobid")
                        .HasColumnType("int");

                    b.Property<int>("productid")
                        .HasColumnType("int");

                    b.Property<int>("uomid")
                        .HasColumnType("int");

                    b.HasKey("issuereturntrackid");

                    b.HasIndex("issuecurrencyid");

                    b.HasIndex("issuereturnno");

                    b.HasIndex("jobid");

                    b.HasIndex("productid");

                    b.HasIndex("uomid");

                    b.ToTable("issuereturntracking");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.Issuetracking", b =>
                {
                    b.Property<int>("issuetrackid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("issuetrackid"), 1L, 1);

                    b.Property<int?>("invid")
                        .HasColumnType("int");

                    b.Property<int>("issuecurrencyid")
                        .HasColumnType("int");

                    b.Property<DateTime>("issuedate")
                        .HasColumnType("datetime2");

                    b.Property<int>("issuenoteno")
                        .HasColumnType("int");

                    b.Property<decimal>("issueqty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("issueunitprice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("issueuomid")
                        .HasColumnType("int");

                    b.Property<int>("jobid")
                        .HasColumnType("int");

                    b.Property<int>("productid")
                        .HasColumnType("int");

                    b.HasKey("issuetrackid");

                    b.HasIndex("issuecurrencyid");

                    b.HasIndex("issuenoteno");

                    b.HasIndex("issueuomid");

                    b.HasIndex("jobid");

                    b.HasIndex("productid");

                    b.ToTable("Issuetracking");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.Job", b =>
                {
                    b.Property<int>("Jobid")
                        .HasColumnType("int");

                    b.Property<int>("bomjobrevno")
                        .HasColumnType("int");

                    b.Property<int>("bomjobrevno2")
                        .HasColumnType("int");

                    b.Property<int>("bomjobstatusid")
                        .HasColumnType("int");

                    b.Property<int>("bomjobstatusid2")
                        .HasColumnType("int");

                    b.Property<int>("currencyid")
                        .HasColumnType("int");

                    b.Property<int>("customerid")
                        .HasColumnType("int");

                    b.Property<string>("deliveryterms")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("enduserid")
                        .HasColumnType("int");

                    b.Property<double>("exchangerate")
                        .HasColumnType("float");

                    b.Property<DateTime>("expecteddeliverydate")
                        .HasColumnType("datetime2");

                    b.Property<int>("isldapplicable")
                        .HasColumnType("int");

                    b.Property<DateTime>("jobdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("jobdescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("jobtypeid")
                        .HasColumnType("int");

                    b.Property<string>("ldpercent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("lpodate")
                        .HasColumnType("datetime2");

                    b.Property<string>("lpono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("mainjobid")
                        .HasColumnType("int");

                    b.Property<int>("manufacturingbayid")
                        .HasColumnType("int");

                    b.Property<double>("ordervalue")
                        .HasColumnType("float");

                    b.Property<double>("ordervaluebasecurrency")
                        .HasColumnType("float");

                    b.Property<string>("paymentterms")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("podeliverydate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("projectcategoryid")
                        .HasColumnType("int");

                    b.Property<string>("projectengineerid")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("projectmanagerid")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("projectname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("qualitylevelid")
                        .HasColumnType("int");

                    b.Property<decimal>("totalinvoiceinbasecurrency")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("totalnumber")
                        .HasColumnType("int");

                    b.Property<string>("warrantyterms")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Jobid");

                    b.HasIndex("currencyid");

                    b.HasIndex("customerid");

                    b.HasIndex("enduserid");

                    b.HasIndex("isldapplicable");

                    b.HasIndex("jobtypeid");

                    b.HasIndex("manufacturingbayid");

                    b.HasIndex("projectcategoryid");

                    b.HasIndex("projectengineerid");

                    b.HasIndex("projectmanagerid");

                    b.HasIndex("qualitylevelid");

                    b.ToTable("Job");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.JobType", b =>
                {
                    b.Property<int>("jobtypeid")
                        .HasColumnType("int");

                    b.Property<string>("JobtypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("startingseries")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("jobtypeid");

                    b.ToTable("JobType");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.ManufacturingBay", b =>
                {
                    b.Property<int>("BayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BayId"), 1L, 1);

                    b.Property<string>("BayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BayId");

                    b.ToTable("ManufacturingBay");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.Materialinspection", b =>
                {
                    b.Property<int>("mid")
                        .HasColumnType("int");

                    b.Property<bool>("colorcoding")
                        .HasColumnType("bit");

                    b.Property<bool>("correlation")
                        .HasColumnType("bit");

                    b.Property<bool>("heattags")
                        .HasColumnType("bit");

                    b.Property<int>("isregistered")
                        .HasColumnType("int");

                    b.Property<bool>("materialsent")
                        .HasColumnType("bit");

                    b.Property<DateTime>("midate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("phycondn")
                        .HasColumnType("bit");

                    b.Property<int>("pono")
                        .HasColumnType("int");

                    b.Property<bool>("qtyverified")
                        .HasColumnType("bit");

                    b.Property<int>("reid")
                        .HasColumnType("int");

                    b.Property<string>("remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("siteidentification")
                        .HasColumnType("bit");

                    b.Property<bool>("tcverify")
                        .HasColumnType("bit");

                    b.HasKey("mid");

                    b.HasIndex("pono");

                    b.HasIndex("reid");

                    b.ToTable("Materialinspection");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.PaymenttermsDays", b =>
                {
                    b.Property<int>("paydaysid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("paydaysid"), 1L, 1);

                    b.Property<string>("paydaynames")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("paydaysid");

                    b.ToTable("PaymenttermsDays");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.PO", b =>
                {
                    b.Property<int>("Orderid")
                        .HasColumnType("int");

                    b.Property<bool>("Mtcrequired")
                        .HasColumnType("bit");

                    b.Property<bool>("Others")
                        .HasColumnType("bit");

                    b.Property<int>("POPaymentterms2id")
                        .HasColumnType("int");

                    b.Property<int>("PaymenttermsDaysid")
                        .HasColumnType("int");

                    b.Property<string>("PoAuthorizedbyid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Podate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Qtndate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Qtnref")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("approveddrawings")
                        .HasColumnType("bit");

                    b.Property<bool>("chineseorgin")
                        .HasColumnType("bit");

                    b.Property<bool>("coorequired")
                        .HasColumnType("bit");

                    b.Property<string>("createdbyid")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("createddate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("deliverydate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("extendedwarraty3years")
                        .HasColumnType("bit");

                    b.Property<int>("jobid")
                        .HasColumnType("int");

                    b.Property<string>("modifiedbyid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("mtcpriortodispatch")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("poauthorizedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("pocurrencyid")
                        .HasColumnType("int");

                    b.Property<int>("podeliverytermsid")
                        .HasColumnType("int");

                    b.Property<double>("poexchangerate")
                        .HasColumnType("float");

                    b.Property<int>("popaymenttermsid")
                        .HasColumnType("int");

                    b.Property<int>("postatusid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("poverifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("poverifiedbyid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("predispatchinspection")
                        .HasColumnType("bit");

                    b.Property<bool>("qtnattached")
                        .HasColumnType("bit");

                    b.Property<bool>("qtnshippingdocs")
                        .HasColumnType("bit");

                    b.Property<string>("supplieraddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("suppliercontactid")
                        .HasColumnType("int");

                    b.Property<int>("supplierid")
                        .HasColumnType("int");

                    b.Property<string>("suppliertrnno")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("updateddate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("warranty")
                        .HasColumnType("bit");

                    b.HasKey("Orderid");

                    b.HasIndex("POPaymentterms2id");

                    b.HasIndex("PaymenttermsDaysid");

                    b.HasIndex("PoAuthorizedbyid");

                    b.HasIndex("createdbyid");

                    b.HasIndex("jobid");

                    b.HasIndex("modifiedbyid");

                    b.HasIndex("pocurrencyid");

                    b.HasIndex("podeliverytermsid");

                    b.HasIndex("popaymenttermsid");

                    b.HasIndex("postatusid");

                    b.HasIndex("poverifiedbyid");

                    b.HasIndex("suppliercontactid");

                    b.HasIndex("supplierid");

                    b.ToTable("PO");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.PODeliveryTerms", b =>
                {
                    b.Property<int>("deliveryid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("deliveryid"), 1L, 1);

                    b.Property<string>("deliveryterms")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("deliveryid");

                    b.ToTable("PODeliveryTerms");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.POPaymentterms", b =>
                {
                    b.Property<int>("paytermsid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("paytermsid"), 1L, 1);

                    b.Property<string>("paymenttermsname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("paytermsid");

                    b.ToTable("POPaymentterms");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.Popaymentterms2", b =>
                {
                    b.Property<int>("paytermsid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("paytermsid"), 1L, 1);

                    b.Property<string>("paymenttermsname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("paytermsid");

                    b.ToTable("Popaymentterms2");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.POStatus", b =>
                {
                    b.Property<int>("postatusid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("postatusid"), 1L, 1);

                    b.Property<string>("postatusname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("postatusid");

                    b.ToTable("postatus");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.PR", b =>
                {
                    b.Property<int>("PRID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Prdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("jobid")
                        .HasColumnType("int");

                    b.Property<string>("prcreatedbyid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("prstatusid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("prverificationdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("verifiedbyid")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PRID");

                    b.HasIndex("jobid");

                    b.HasIndex("prcreatedbyid");

                    b.HasIndex("prstatusid");

                    b.HasIndex("verifiedbyid");

                    b.ToTable("PR");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.PRDetails", b =>
                {
                    b.Property<int>("prtblid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("prtblid"), 1L, 1);

                    b.Property<int>("bomid")
                        .HasColumnType("int");

                    b.Property<float>("pocreatedqty")
                        .HasColumnType("real");

                    b.Property<int>("prid")
                        .HasColumnType("int");

                    b.Property<int>("pritemid")
                        .HasColumnType("int");

                    b.Property<float>("prqty")
                        .HasColumnType("real");

                    b.Property<decimal>("prstockqty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("pruomid")
                        .HasColumnType("int");

                    b.HasKey("prtblid");

                    b.HasIndex("bomid");

                    b.HasIndex("prid");

                    b.HasIndex("pritemid");

                    b.HasIndex("pruomid");

                    b.ToTable("PRDetails");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.Product", b =>
                {
                    b.Property<int>("itemid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("itemid"), 1L, 1);

                    b.Property<int>("categoryid")
                        .HasColumnType("int");

                    b.Property<int>("itembudgetheaderid")
                        .HasColumnType("int");

                    b.Property<string>("itemcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("itemdescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("itemname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("price")
                        .HasColumnType("real");

                    b.Property<int>("productcode")
                        .HasColumnType("int");

                    b.Property<int>("standarduomid")
                        .HasColumnType("int");

                    b.Property<int>("subcategoryid")
                        .HasColumnType("int");

                    b.HasKey("itemid");

                    b.HasIndex("categoryid");

                    b.HasIndex("itembudgetheaderid");

                    b.HasIndex("standarduomid");

                    b.HasIndex("subcategoryid");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.ProductionStages", b =>
                {
                    b.Property<int>("prostageid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("prostageid"), 1L, 1);

                    b.Property<string>("productionstagename")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("prostageid");

                    b.ToTable("ProductionStages");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.ProjectCategory", b =>
                {
                    b.Property<int>("projectcategoryid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("projectcategoryid"), 1L, 1);

                    b.Property<string>("projectcategoryname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("projectcategoryid");

                    b.ToTable("ProjectCategory");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.PRPO", b =>
                {
                    b.Property<int>("prpotblid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("prpotblid"), 1L, 1);

                    b.Property<int>("Purchasedetailspotblid")
                        .HasColumnType("int");

                    b.Property<int>("prdetailsprtblid")
                        .HasColumnType("int");

                    b.HasKey("prpotblid");

                    b.HasIndex("Purchasedetailspotblid");

                    b.HasIndex("prdetailsprtblid");

                    b.ToTable("PRPO", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.PRstatus", b =>
                {
                    b.Property<int>("prstatusid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("prstatusid"), 1L, 1);

                    b.Property<string>("prstatusname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("prstatusid");

                    b.ToTable("PRstatus");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.Purchasedetails", b =>
                {
                    b.Property<int>("potblid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("potblid"), 1L, 1);

                    b.Property<decimal>("grncreatedqty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("inspacceptedqty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("make")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("orderid")
                        .HasColumnType("int");

                    b.Property<int>("poitemid")
                        .HasColumnType("int");

                    b.Property<decimal>("poquantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("pounitprice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("pouomid")
                        .HasColumnType("int");

                    b.Property<decimal>("receivedentryqty")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("potblid");

                    b.HasIndex("orderid");

                    b.HasIndex("poitemid");

                    b.HasIndex("pouomid");

                    b.ToTable("Purchasedetails");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.QualityLevel", b =>
                {
                    b.Property<int>("qualitylevelid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("qualitylevelid"), 1L, 1);

                    b.Property<string>("qualitylevelname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("qualitylevelid");

                    b.ToTable("QualityLevel");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.ReceivedEntry", b =>
                {
                    b.Property<int>("REID")
                        .HasColumnType("int");

                    b.Property<DateTime>("REDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("isregistered")
                        .HasColumnType("int");

                    b.Property<string>("location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("pono")
                        .HasColumnType("int");

                    b.HasKey("REID");

                    b.HasIndex("pono");

                    b.ToTable("ReceivedEntry");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.ReceivedEntryDetails", b =>
                {
                    b.Property<int>("rtblid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("rtblid"), 1L, 1);

                    b.Property<int>("RENO")
                        .HasColumnType("int");

                    b.Property<decimal>("acceptedqty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("holdqty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("itemid")
                        .HasColumnType("int");

                    b.Property<int>("potblid")
                        .HasColumnType("int");

                    b.Property<decimal>("receivedqty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("rejectedqty")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("rtblid");

                    b.HasIndex("RENO");

                    b.HasIndex("itemid");

                    b.HasIndex("potblid");

                    b.ToTable("ReceivedEntryDetails");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.SubCategory", b =>
                {
                    b.Property<int>("subcategoryid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("subcategoryid"), 1L, 1);

                    b.Property<int>("categoryid")
                        .HasColumnType("int");

                    b.Property<string>("subcategoryname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("subcategoryid");

                    b.HasIndex("categoryid");

                    b.ToTable("SubCategory");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.Supplier", b =>
                {
                    b.Property<int>("supplierid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("supplierid"), 1L, 1);

                    b.Property<string>("supplieraddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("suppliername")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("suppliertrnno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("supplierid");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.SupplierContact", b =>
                {
                    b.Property<int>("suppliercontectid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("suppliercontectid"), 1L, 1);

                    b.Property<string>("suppliercontactname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("supplierid")
                        .HasColumnType("int");

                    b.HasKey("suppliercontectid");

                    b.HasIndex("supplierid");

                    b.ToTable("SupplierContact");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.UOM", b =>
                {
                    b.Property<int>("uomid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("uomid"), 1L, 1);

                    b.Property<string>("uomname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("uomid");

                    b.ToTable("UOM");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.UomMultiplyingFactor", b =>
                {
                    b.Property<int>("muid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("muid"), 1L, 1);

                    b.Property<int>("conversionfactor")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("fromuomid")
                        .HasColumnType("int");

                    b.Property<int>("itemid")
                        .HasColumnType("int");

                    b.Property<int>("touomid")
                        .HasColumnType("int");

                    b.HasKey("muid");

                    b.HasIndex("fromuomid");

                    b.HasIndex("itemid");

                    b.HasIndex("touomid");

                    b.ToTable("UomMultiplyingFactor");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.Warehouse", b =>
                {
                    b.Property<int>("wId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("wId"), 1L, 1);

                    b.Property<string>("warehousename")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("wId");

                    b.ToTable("Warehouse");
                });

            modelBuilder.Entity("WebApplication1.Models.Invoice", b =>
                {
                    b.Property<int>("invoiceno")
                        .HasColumnType("int");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LPODate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LPOno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("customerid")
                        .HasColumnType("int");

                    b.Property<int>("invcurrencyid")
                        .HasColumnType("int");

                    b.Property<int>("isregistered")
                        .HasColumnType("int");

                    b.Property<int>("jobid")
                        .HasColumnType("int");

                    b.Property<string>("remarks")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("invoiceno");

                    b.HasIndex("customerid");

                    b.HasIndex("invcurrencyid");

                    b.HasIndex("jobid");

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebApplication1.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebApplication1.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebApplication1.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.Bom", b =>
                {
                    b.HasOne("WebApplication1.Models.Domain.ApplicationUser", "Bomcreatedby")
                        .WithMany()
                        .HasForeignKey("bomcreatedbyid")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("WebApplication1.Models.Domain.UOM", "UOM")
                        .WithMany()
                        .HasForeignKey("bomuomid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.Currency", "currency")
                        .WithMany()
                        .HasForeignKey("currencyid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("itemid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.Job", "Job")
                        .WithMany()
                        .HasForeignKey("jobid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.ProductionStages", "Productionstages")
                        .WithMany()
                        .HasForeignKey("prodstageid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Bomcreatedby");

                    b.Navigation("Job");

                    b.Navigation("Product");

                    b.Navigation("Productionstages");

                    b.Navigation("UOM");

                    b.Navigation("currency");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.Category", b =>
                {
                    b.HasOne("WebApplication1.Models.Domain.BudgettHeader", "BudgettHeader")
                        .WithMany()
                        .HasForeignKey("budgetheaderid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BudgettHeader");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.Customer", b =>
                {
                    b.HasOne("WebApplication1.Models.Domain.Country", "country")
                        .WithMany()
                        .HasForeignKey("countryid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("country");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.estimation", b =>
                {
                    b.HasOne("WebApplication1.Models.Domain.ProductionStages", "ProductionStages")
                        .WithMany()
                        .HasForeignKey("applicationid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("currencyid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("itemid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.Job", "Job")
                        .WithMany()
                        .HasForeignKey("jobid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.UOM", "UOM")
                        .WithMany()
                        .HasForeignKey("uomid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Job");

                    b.Navigation("Product");

                    b.Navigation("ProductionStages");

                    b.Navigation("UOM");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.FixedBudget", b =>
                {
                    b.HasOne("WebApplication1.Models.Domain.BudgettHeader", "BudgetHeader")
                        .WithMany()
                        .HasForeignKey("budgetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BudgetHeader");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.GRNDetails", b =>
                {
                    b.HasOne("WebApplication1.Models.Domain.GRNHeader", "GRNHeader")
                        .WithMany()
                        .HasForeignKey("grnno")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.UOM", "Inventoryuom")
                        .WithMany()
                        .HasForeignKey("inventoryuomid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("itemcode")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.UOM", "POUOM")
                        .WithMany()
                        .HasForeignKey("pouomid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("GRNHeader");

                    b.Navigation("Inventoryuom");

                    b.Navigation("POUOM");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.GRNHeader", b =>
                {
                    b.HasOne("WebApplication1.Models.Domain.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("currencyid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.PO", "PO")
                        .WithMany()
                        .HasForeignKey("pono")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("PO");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.grntracking", b =>
                {
                    b.HasOne("WebApplication1.Models.Domain.Currency", "currency")
                        .WithMany()
                        .HasForeignKey("grncurrencyid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.GRNHeader", "GRNHeader")
                        .WithMany()
                        .HasForeignKey("grnno")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.UOM", "UOM")
                        .WithMany()
                        .HasForeignKey("grnuomid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.Job", "Job")
                        .WithMany()
                        .HasForeignKey("jobid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("productid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("GRNHeader");

                    b.Navigation("Job");

                    b.Navigation("Product");

                    b.Navigation("UOM");

                    b.Navigation("currency");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.Inventory", b =>
                {
                    b.HasOne("WebApplication1.Models.Domain.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("invcurrencyid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.Job", "Job")
                        .WithMany()
                        .HasForeignKey("jobid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.PO", "PO")
                        .WithMany()
                        .HasForeignKey("pono")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("productid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.UOM", "UOM")
                        .WithMany()
                        .HasForeignKey("uomid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Job");

                    b.Navigation("PO");

                    b.Navigation("Product");

                    b.Navigation("UOM");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.Inventoryreservation", b =>
                {
                    b.HasOne("WebApplication1.Models.Domain.Job", "FROMJob")
                        .WithMany()
                        .HasForeignKey("fromjobid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.Inventory", "Inventory")
                        .WithMany()
                        .HasForeignKey("inventoryid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("invrcurrencyid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("productid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.PRDetails", "PRDetails")
                        .WithMany()
                        .HasForeignKey("prtblid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.Job", "TOJob")
                        .WithMany()
                        .HasForeignKey("tojobid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.UOM", "UOM")
                        .WithMany()
                        .HasForeignKey("uomid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("FROMJob");

                    b.Navigation("Inventory");

                    b.Navigation("PRDetails");

                    b.Navigation("Product");

                    b.Navigation("TOJob");

                    b.Navigation("UOM");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.Invoicedetails", b =>
                {
                    b.HasOne("WebApplication1.Models.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("invoiceno")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.InvoiceReg", b =>
                {
                    b.HasOne("WebApplication1.Models.Domain.ApplicationUser", "applicationUser")
                        .WithMany()
                        .HasForeignKey("Invoiceregisteredby")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("currencyid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("customerid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("invoiceno")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.Job", "Job")
                        .WithMany()
                        .HasForeignKey("jobid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Customer");

                    b.Navigation("Invoice");

                    b.Navigation("Job");

                    b.Navigation("applicationUser");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.IssuedetailsfromStock", b =>
                {
                    b.HasOne("WebApplication1.Models.Domain.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("issuecurrencyid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.IssueNoteheader", "IssueNoteheader")
                        .WithMany()
                        .HasForeignKey("issuenoteref")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.UOM", "UOM")
                        .WithMany()
                        .HasForeignKey("issueuomid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("itemid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.Inventoryreservation", "Inventoryreservation")
                        .WithMany()
                        .HasForeignKey("rid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Inventoryreservation");

                    b.Navigation("IssueNoteheader");

                    b.Navigation("Product");

                    b.Navigation("UOM");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.Issuenotedetails", b =>
                {
                    b.HasOne("WebApplication1.Models.Domain.IssueNoteheader", "IssueNoteheader")
                        .WithMany()
                        .HasForeignKey("issuenoteref")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("itemid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("IssueNoteheader");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.IssueNoteheader", b =>
                {
                    b.HasOne("WebApplication1.Models.Domain.Job", "job")
                        .WithMany()
                        .HasForeignKey("jobid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("job");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.Issuereturn", b =>
                {
                    b.HasOne("WebApplication1.Models.Domain.Job", "job")
                        .WithMany()
                        .HasForeignKey("jobid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("job");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.Issuereturndetails", b =>
                {
                    b.HasOne("WebApplication1.Models.Domain.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("ircurrencyid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.UOM", "UOM")
                        .WithMany()
                        .HasForeignKey("iruomid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.IssuedetailsfromStock", "IssuedetailsfromStock")
                        .WithMany()
                        .HasForeignKey("issuedetailtblid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.Issuereturn", "Issuereturn")
                        .WithMany()
                        .HasForeignKey("issuereturnref")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("productid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("IssuedetailsfromStock");

                    b.Navigation("Issuereturn");

                    b.Navigation("Product");

                    b.Navigation("UOM");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.issuereturntracking", b =>
                {
                    b.HasOne("WebApplication1.Models.Domain.Currency", "currency")
                        .WithMany()
                        .HasForeignKey("issuecurrencyid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.Issuereturn", "Issuereturn")
                        .WithMany()
                        .HasForeignKey("issuereturnno")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.Job", "Job")
                        .WithMany()
                        .HasForeignKey("jobid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("productid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.UOM", "UOM")
                        .WithMany()
                        .HasForeignKey("uomid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Issuereturn");

                    b.Navigation("Job");

                    b.Navigation("Product");

                    b.Navigation("UOM");

                    b.Navigation("currency");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.Issuetracking", b =>
                {
                    b.HasOne("WebApplication1.Models.Domain.Currency", "currency")
                        .WithMany()
                        .HasForeignKey("issuecurrencyid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.IssueNoteheader", "IssueNoteheader")
                        .WithMany()
                        .HasForeignKey("issuenoteno")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.UOM", "UOM")
                        .WithMany()
                        .HasForeignKey("issueuomid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.Job", "Job")
                        .WithMany()
                        .HasForeignKey("jobid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("productid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("IssueNoteheader");

                    b.Navigation("Job");

                    b.Navigation("Product");

                    b.Navigation("UOM");

                    b.Navigation("currency");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.Job", b =>
                {
                    b.HasOne("WebApplication1.Models.Domain.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("currencyid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("customerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.Customer", "Enduser")
                        .WithMany()
                        .HasForeignKey("enduserid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.IsLDApplicable", "isldapp")
                        .WithMany()
                        .HasForeignKey("isldapplicable")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.JobType", "JobType")
                        .WithMany()
                        .HasForeignKey("jobtypeid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.ManufacturingBay", "ManufacturingBay")
                        .WithMany()
                        .HasForeignKey("manufacturingbayid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.ProjectCategory", "ProjectCategory")
                        .WithMany()
                        .HasForeignKey("projectcategoryid")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("WebApplication1.Models.Domain.ApplicationUser", "ProjectEngineer")
                        .WithMany()
                        .HasForeignKey("projectengineerid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.ApplicationUser", "ProjectManager")
                        .WithMany()
                        .HasForeignKey("projectmanagerid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.QualityLevel", "QualityLevel")
                        .WithMany()
                        .HasForeignKey("qualitylevelid")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Currency");

                    b.Navigation("Customer");

                    b.Navigation("Enduser");

                    b.Navigation("JobType");

                    b.Navigation("ManufacturingBay");

                    b.Navigation("ProjectCategory");

                    b.Navigation("ProjectEngineer");

                    b.Navigation("ProjectManager");

                    b.Navigation("QualityLevel");

                    b.Navigation("isldapp");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.Materialinspection", b =>
                {
                    b.HasOne("WebApplication1.Models.Domain.PO", "PO")
                        .WithMany()
                        .HasForeignKey("pono")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.ReceivedEntry", "receivedEntry")
                        .WithMany()
                        .HasForeignKey("reid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PO");

                    b.Navigation("receivedEntry");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.PO", b =>
                {
                    b.HasOne("WebApplication1.Models.Domain.Popaymentterms2", "POPaymentterms2")
                        .WithMany()
                        .HasForeignKey("POPaymentterms2id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.PaymenttermsDays", "PaymenttermsDays")
                        .WithMany()
                        .HasForeignKey("PaymenttermsDaysid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.ApplicationUser", "PoAuthorizedby")
                        .WithMany()
                        .HasForeignKey("PoAuthorizedbyid")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("WebApplication1.Models.Domain.ApplicationUser", "createdby")
                        .WithMany()
                        .HasForeignKey("createdbyid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.Job", "Job")
                        .WithMany()
                        .HasForeignKey("jobid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.ApplicationUser", "modifiedby")
                        .WithMany()
                        .HasForeignKey("modifiedbyid")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("WebApplication1.Models.Domain.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("pocurrencyid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.PODeliveryTerms", "PODeliveryTerms")
                        .WithMany()
                        .HasForeignKey("podeliverytermsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.POPaymentterms", "POPaymentterms")
                        .WithMany()
                        .HasForeignKey("popaymenttermsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.POStatus", "postatus")
                        .WithMany()
                        .HasForeignKey("postatusid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.ApplicationUser", "Poverifiedby")
                        .WithMany()
                        .HasForeignKey("poverifiedbyid")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("WebApplication1.Models.Domain.SupplierContact", "SupplierContact")
                        .WithMany()
                        .HasForeignKey("suppliercontactid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("supplierid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Job");

                    b.Navigation("PODeliveryTerms");

                    b.Navigation("POPaymentterms");

                    b.Navigation("POPaymentterms2");

                    b.Navigation("PaymenttermsDays");

                    b.Navigation("PoAuthorizedby");

                    b.Navigation("Poverifiedby");

                    b.Navigation("Supplier");

                    b.Navigation("SupplierContact");

                    b.Navigation("createdby");

                    b.Navigation("modifiedby");

                    b.Navigation("postatus");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.PR", b =>
                {
                    b.HasOne("WebApplication1.Models.Domain.Job", "Job")
                        .WithMany()
                        .HasForeignKey("jobid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.ApplicationUser", "prcreatedby")
                        .WithMany()
                        .HasForeignKey("prcreatedbyid")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("WebApplication1.Models.Domain.PRstatus", "PRstatus")
                        .WithMany()
                        .HasForeignKey("prstatusid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.ApplicationUser", "verifiedby")
                        .WithMany()
                        .HasForeignKey("verifiedbyid")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Job");

                    b.Navigation("PRstatus");

                    b.Navigation("prcreatedby");

                    b.Navigation("verifiedby");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.PRDetails", b =>
                {
                    b.HasOne("WebApplication1.Models.Domain.Bom", "Bom")
                        .WithMany()
                        .HasForeignKey("bomid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.PR", "PR")
                        .WithMany()
                        .HasForeignKey("prid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("pritemid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.UOM", "UOM")
                        .WithMany()
                        .HasForeignKey("pruomid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Bom");

                    b.Navigation("PR");

                    b.Navigation("Product");

                    b.Navigation("UOM");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.Product", b =>
                {
                    b.HasOne("WebApplication1.Models.Domain.Category", "Category")
                        .WithMany()
                        .HasForeignKey("categoryid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.BudgettHeader", "BudgettHeader")
                        .WithMany()
                        .HasForeignKey("itembudgetheaderid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.UOM", "UOM")
                        .WithMany()
                        .HasForeignKey("standarduomid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.SubCategory", "SubCategory")
                        .WithMany()
                        .HasForeignKey("subcategoryid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BudgettHeader");

                    b.Navigation("Category");

                    b.Navigation("SubCategory");

                    b.Navigation("UOM");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.PRPO", b =>
                {
                    b.HasOne("WebApplication1.Models.Domain.Purchasedetails", "Purchasedetails")
                        .WithMany("PRPOs")
                        .HasForeignKey("Purchasedetailspotblid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.PRDetails", "Prdetails")
                        .WithMany("PRPOs")
                        .HasForeignKey("prdetailsprtblid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prdetails");

                    b.Navigation("Purchasedetails");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.Purchasedetails", b =>
                {
                    b.HasOne("WebApplication1.Models.Domain.PO", "PO")
                        .WithMany()
                        .HasForeignKey("orderid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.Product", "product")
                        .WithMany()
                        .HasForeignKey("poitemid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.UOM", "UOM")
                        .WithMany()
                        .HasForeignKey("pouomid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PO");

                    b.Navigation("UOM");

                    b.Navigation("product");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.ReceivedEntry", b =>
                {
                    b.HasOne("WebApplication1.Models.Domain.PO", "PO")
                        .WithMany()
                        .HasForeignKey("pono")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PO");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.ReceivedEntryDetails", b =>
                {
                    b.HasOne("WebApplication1.Models.Domain.ReceivedEntry", "ReceivedEntry")
                        .WithMany()
                        .HasForeignKey("RENO")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("itemid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.Purchasedetails", "Purchasedetails")
                        .WithMany()
                        .HasForeignKey("potblid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Purchasedetails");

                    b.Navigation("ReceivedEntry");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.SubCategory", b =>
                {
                    b.HasOne("WebApplication1.Models.Domain.Category", "Category")
                        .WithMany()
                        .HasForeignKey("categoryid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.SupplierContact", b =>
                {
                    b.HasOne("WebApplication1.Models.Domain.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("supplierid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.UomMultiplyingFactor", b =>
                {
                    b.HasOne("WebApplication1.Models.Domain.UOM", "FROMUOM")
                        .WithMany()
                        .HasForeignKey("fromuomid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("itemid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.UOM", "TOUOM")
                        .WithMany()
                        .HasForeignKey("touomid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FROMUOM");

                    b.Navigation("Product");

                    b.Navigation("TOUOM");
                });

            modelBuilder.Entity("WebApplication1.Models.Invoice", b =>
                {
                    b.HasOne("WebApplication1.Models.Domain.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("customerid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("invcurrencyid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Domain.Job", "Job")
                        .WithMany()
                        .HasForeignKey("jobid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Customer");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.PRDetails", b =>
                {
                    b.Navigation("PRPOs");
                });

            modelBuilder.Entity("WebApplication1.Models.Domain.Purchasedetails", b =>
                {
                    b.Navigation("PRPOs");
                });
#pragma warning restore 612, 618
        }
    }
}
